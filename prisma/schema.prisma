generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your PostgreSQL connection string
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  groups       Group[]        @relation("UserGroups") // Implicit many-to-many
  tasks        Task[]
  createdMeals Meal[]
  expenses     Expense[]
  sentMessages Message[]      @relation("Sender")
  receivedMessages Message[]  @relation("Receiver")
  notifications Notification[]
}

model Group {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     User[]       @relation("UserGroups") // Implicit many-to-many
  meals       Meal[]
  tasks       Task[]
  expenses    Expense[]
}

model Meal {
  id          Int       @id @default(autoincrement())
  name        String
  date        DateTime
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id])
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id])
}

// model Task {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String
//   assignedToId Int?
//   assignedTo  User?     @relation(fields: [assignedToId], references: [id])
//   mealId      Int
//   meal        Meal      @relation(fields: [mealId], references: [id])
//   groupId     Int
//   group       Group     @relation(fields: [groupId], references: [id])
//   createdAt   DateTime  @default(now())
// }
model Task {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  assignedTo   User     @relation(fields: [assignedToId], references: [id])
  assignedToId Int
  group        Group    @relation(fields: [groupId], references: [id])
  groupId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Expense {
  id          Int       @id @default(autoincrement())
  amount      Float
  paidById    Int
  paidBy      User      @relation(fields: [paidById], references: [id])
  splitAmong  Int[]
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id])
  createdAt   DateTime  @default(now())
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  senderId    Int
  sender      User      @relation("Sender", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  createdAt   DateTime  @default(now())
}

model Notification {
  id          Int       @id @default(autoincrement())
  content     String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}
